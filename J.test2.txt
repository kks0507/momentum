
### 내용 요약

이 문서는 자바 프로그래밍의 기초 개념인 **클래스와 객체**에 대해 설명합니다. 
객체 지향 프로그래밍의 기본 개념부터 클래스와 객체의 차이점, 객체 생성 방법, 클래스의 멤버 변수와 메서드 정의 방법 등을 다룹니다. 
특히, 이러한 개념들이 스프링 부트와 같은 백엔드 프레임워크에서 어떻게 활용될 수 있는지에 대해 설명합니다.

### 중요한 내용과 쉬운 설명

#### 클래스와 객체
- **클래스 (Class)**: 객체를 생성하기 위한 설계도입니다. 예를 들어, 자동차를 만들기 위한 청사진이나 설계도라고 생각할 수 있습니다.
- **객체 (Object)**: 클래스를 기반으로 생성된 실체입니다. 설계도를 바탕으로 실제로 만들어진 자동차가 객체입니다.

#### 클래스와 객체의 관계
- **비유**: 클래스를 쿠키 틀, 객체를 쿠키로 생각할 수 있습니다. 쿠키 틀(클래스)을 사용하면 여러 개의 쿠키(객체)를 만들 수 있습니다.

#### 클래스 정의와 객체 생성

```java
// 클래스 정의
class Car {
    // 멤버 변수
    String model;
    int year;

    // 메서드
    void drive() {
        System.out.println("Driving...");
    }
}

// 객체 생성
public class Main {
    public static void main(String[] args) {
        // Car 객체 생성
        Car myCar = new Car();
        myCar.model = "Tesla";
        myCar.year = 2021;
        myCar.drive(); // 출력: Driving...
    }
}
```

#### 멤버 변수와 메서드
- **멤버 변수 (Member Variable)**: 클래스 내에서 정의된 변수로, 객체의 속성을 나타냅니다. 
	예를 들어, 자동차 클래스에서는 모델명과 제작 연도가 멤버 변수가 될 수 있습니다.
- **메서드 (Method)**: 클래스 내에서 정의된 함수로, 객체의 동작을 나타냅니다. 
	예를 들어, 자동차 클래스에서는 운전 기능이 메서드가 될 수 있습니다.

#### 객체 지향 프로그래밍의 장점
- **유연성**: 프로그램을 모듈화하여 유지보수가 쉽습니다. 
	예를 들어, 자동차의 특정 기능을 수정하려면 해당 클래스만 수정하면 됩니다.
- **재사용성**: 클래스 설계도를 재사용하여 여러 객체를 생성할 수 있습니다. 
	예를 들어, 자동차 클래스를 이용해 다양한 모델의 자동차를 만들 수 있습니다.

#### 스프링 부트와 객체 지향 프로그래밍
- **스프링 부트(Spring Boot)**: 자바 기반의 백엔드 프레임워크로, 객체 지향 프로그래밍의 개념을 활용하여 애플리케이션을 구성합니다. 
예를 들어, 스프링 부트에서는 `@Controller`, `@Service`, `@Repository` 등의 어노테이션을 사용해 클래스를 정의하고 객체를 생성하여 관리합니다.
- **비유**: 스프링 부트는 큰 빌딩을 짓는 과정에서 각 방(객체)을 설계도(클래스)로 만들어 필요한 곳에 배치하는 것과 같습니다.
