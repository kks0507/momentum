
### 내용 요약
이 문서는 자바 프로그래밍의 **상속**과 **다형성**에 대해 설명합니다. 
상속을 사용하여 클래스 간의 관계를 정의하고, 다형성을 통해 객체를 유연하게 다룰 수 있는 방법을 다룹니다. 
주요 내용은 상속의 개념, 메서드 오버라이딩, 객체 타입 변환, 다형성의 장점 등을 포함합니다. 예제 코드를 통해 개념을 명확히 이해할 수 있도록 돕고 있습니다.


#### 상속 (Inheritance)
- **정의**: 상속은 새로운 클래스가 기존의 클래스를 기반으로 하여 그 클래스의 속성과 메서드를 물려받는 것입니다.
- **비유**: 부모로부터 재산을 물려받는 것처럼, 자식 클래스가 부모 클래스의 기능을 물려받습니다.
- **예시**: 자바에서 `extends` 키워드를 사용하여 상속을 구현합니다. 예를 들어, `class Dog extends Animal`은 `Dog` 클래스가 `Animal` 클래스를 상속받는다는 의미입니다.

```java
class Animal {
    String name;
    void eat() {
        System.out.println("Eating...");
    }
}

class Dog extends Animal {
    void bark() {
        System.out.println("Barking...");
    }
}
```

#### 다형성 (Polymorphism)
- **정의**: 다형성은 동일한 인터페이스를 사용하지만 다양한 형태로 동작할 수 있는 능력을 의미합니다.
- **비유**: 같은 리모컨으로 TV도 켜고 에어컨도 켤 수 있는 것처럼, 하나의 메서드가 여러 클래스에서 다르게 구현될 수 있습니다.
- **예시**: 자바에서 다형성은 메서드 오버라이딩과 인터페이스 구현을 통해 달성됩니다. 예를 들어, `Animal` 클래스에 `speak()` 메서드가 있고, `Dog`와 `Cat` 클래스가 이를 각각 다르게 구현할 수 있습니다.

```java
class Animal {
    void speak() {
        System.out.println("Animal speaks");
    }
}

class Dog extends Animal {
    @Override
    void speak() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    @Override
    void speak() {
        System.out.println("Cat meows");
    }
}
```

#### 메서드 오버라이딩 (Method Overriding)
- **정의**: 상속받은 메서드를 자식 클래스에서 재정의하는 것입니다.
- **비유**: 부모가 물려준 재산을 자식이 자신의 필요에 맞게 사용하는 것과 같습니다.

#### 객체 타입 변환 (Type Casting)
- **정의**: 객체를 상위 클래스나 하위 클래스로 변환하는 것입니다.
- **비유**: 커피잔을 컵이라고 부를 수 있지만, 컵이 커피잔일 수도 있고 물잔일 수도 있는 것처럼, 객체도 다양한 형태로 변환될 수 있습니다.

```java
Animal animal = new Dog(); // 업캐스팅
Dog dog = (Dog) animal; // 다운캐스팅
```

#### 다형성의 장점
- **유연성 증가**: 프로그램의 구조를 유연하게 만들어 유지보수가 용이합니다.
  - **비유**: 레고 블록처럼, 한 번 만들어 놓은 기본 블록을 다양한 형태로 조립할 수 있습니다.
- **코드 재사용성**: 기존 클래스의 코드를 재사용함으로써 중복을 줄이고 유지보수에 드는 비용을 줄일 수 있습니다.
  - **비유**: 요리할 때 매번 재료를 처음부터 준비하는 것이 아니라, 미리 손질해 놓은 재료를 사용하여 요리하는 것과 비슷합니다.

### 스프링 부트와 상속 및 다형성

스프링 부트는 객체 지향 프로그래밍의 상속과 다형성 개념을 활용하여 애플리케이션을 설계합니다. 
예를 들어, 서비스 클래스는 공통 인터페이스를 구현하여 다양한 비즈니스 로직을 처리할 수 있습니다.

#### 예시: 스프링 부트 서비스 계층

```java
public interface UserService {
    void registerUser(User user);
}

@Service
public class UserServiceImpl implements UserService {
    @Override
    public void registerUser(User user) {
        // 사용자 등록 로직
    }
}

@Service
public class AdminUserServiceImpl implements UserService {
    @Override
    public void registerUser(User user) {
        // 관리자 사용자 등록 로직
    }
}
```

이 예제에서 `UserService` 인터페이스를 구현한 두 개의 클래스(`UserServiceImpl`, `AdminUserServiceImpl`)는 다형성을 활용하여 동일한 메서드를 다르게 구현합니다.

이 요약과 설명이 스프링 부트 백엔드 개발을 처음 접하는 사람에게도 도움이 되기를 바랍니다. 추가로 궁금한 점이 있으면 언제든지 말씀해 주세요!